"""
AIdea Lab - ÏïÑÏù¥ÎîîÏñ¥ Î∂ÑÏÑù ÏõåÌÅ¨Ïàç UI

Ïù¥ Î™®ÎìàÏùÄ StreamlitÏùÑ Ïù¥Ïö©Ìïú Ï±óÎ¥á Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Î•º Ï†úÍ≥µÌï©ÎãàÎã§.
ÏÇ¨Ïö©ÏûêÎäî ÏïÑÏù¥ÎîîÏñ¥Î•º ÏûÖÎ†•ÌïòÍ≥† AI ÌéòÎ•¥ÏÜåÎÇòÎì§Ïùò Î∂ÑÏÑù Í≤∞Í≥ºÎ•º Ï±óÎ¥á ÌòïÌÉúÎ°ú Î≥º Ïàò ÏûàÏäµÎãàÎã§.
"""

import os
import sys
import asyncio
import streamlit as st
import time # stream_text_generator ÏóêÏÑú ÏÇ¨Ïö© (ÌòÑÏû¨ ÏßÅÏ†ë Ìò∏Ï∂úÎêòÏßÄÎäî ÏïäÏùå)
from dotenv import load_dotenv
from google.adk.runners import Runner # Ïã§Ï†ú ADK Runner ÏûÑÌè¨Ìä∏
from google.genai import types

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ ÎîîÎ†âÌÜ†Î¶¨Î•º sys.pathÏóê Ï∂îÍ∞Ä
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))
from src.orchestrator.main_orchestrator import AIdeaLabOrchestrator
from src.session_manager import SessionManager
from config.personas import PERSONA_CONFIGS, PersonaType, ORCHESTRATOR_CONFIG, PERSONA_SEQUENCE
from config.models import get_model_display_options, MODEL_CONFIGS, ModelType, DEFAULT_MODEL

# .env ÌååÏùºÏóêÏÑú ÌôòÍ≤Ω Î≥ÄÏàò Î°úÎìú
load_dotenv()

# Streamlit ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï
st.set_page_config(
    page_title="AIdea Lab - ÏïÑÏù¥ÎîîÏñ¥ Î∂ÑÏÑù ÏõåÌÅ¨Ïàç",
    page_icon="üß†",
    layout="centered"
)

# Ïï± Ï†ïÎ≥¥
APP_NAME = "AIdea Lab"
USER_ID = "streamlit_user"

# ÏÑ∏ÏÖò Í¥ÄÎ¶¨Ïûê Ï¥àÍ∏∞Ìôî
session_manager = SessionManager(APP_NAME, USER_ID)

# ÏãúÏä§ÌÖú ÏïàÎÇ¥ Î©îÏãúÏßÄ ÌÖúÌîåÎ¶ø Ï†ïÏùò
SYSTEM_MESSAGES = {
    "welcome": "**AIdea LabÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§.** ÎãπÏã†Ïùò ÏïÑÏù¥ÎîîÏñ¥Î•º ÏûÖÎ†•ÌïòÏãúÎ©¥ AI ÌéòÎ•¥ÏÜåÎÇòÎì§Ïù¥ Îã§ÏñëÌïú Í¥ÄÏ†êÏóêÏÑú Î∂ÑÏÑùÌï¥ÎìúÎ¶ΩÎãàÎã§.",
    "phase1_start": "**Î∂ÑÏÑùÏùÑ ÏãúÏûëÌï©ÎãàÎã§.** Í∞Å AI ÌéòÎ•¥ÏÜåÎÇòÍ∞Ä ÏàúÏ∞®Ï†ÅÏúºÎ°ú ÏùòÍ≤¨ÏùÑ Ï†úÏãúÌï† ÏòàÏ†ïÏûÖÎãàÎã§.",
    "marketer_intro": "**üí° ÏïÑÏù¥ÎîîÏñ¥ ÎßàÏºÄÌåÖ Î∂ÑÏÑùÍ∞ÄÏùò ÏùòÍ≤¨:**",
    "critic_intro": "**üîç ÎπÑÌåêÏ†Å Î∂ÑÏÑùÍ∞ÄÏùò ÏùòÍ≤¨:**",
    "engineer_intro": "**‚öôÔ∏è ÌòÑÏã§Ï£ºÏùò ÏóîÏßÄÎãàÏñ¥Ïùò ÏùòÍ≤¨:**",
    "summary_phase1_intro": "**üìù ÏµúÏ¢Ö ÏöîÏïΩ Î∞è Ï¢ÖÌï©:**", # summary_phase1 ÌÇ§ÏôÄ ÏùºÏπòÌïòÎèÑÎ°ù ÏàòÏ†ï
    "phase1_complete": "**1Îã®Í≥Ñ Î∂ÑÏÑùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.**",
    "phase1_error": "**Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.** Îã§Ïãú ÏãúÎèÑÌïòÍ±∞ÎÇò ÏÉàÎ°úÏö¥ ÏïÑÏù¥ÎîîÏñ¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
    # 2Îã®Í≥Ñ Í¥ÄÎ†® Î©îÏãúÏßÄ (Ï∂îÌõÑ Ï∂îÍ∞Ä)
    # "phase2_welcome": "**2Îã®Í≥Ñ Ïã¨Ï∏µ ÌÜ†Î°†ÏùÑ ÏãúÏûëÌï©ÎãàÎã§.** Í∞Å ÌéòÎ•¥ÏÜåÎÇòÏôÄ ÏûêÏú†Î°≠Í≤å ÏùòÍ≤¨ÏùÑ ÎÇòÎà†Î≥¥ÏÑ∏Ïöî."
}

# ÌéòÎ•¥ÏÜåÎÇò ÏïÑÎ∞îÌÉÄ Ï†ïÏùò
persona_avatars = {
    "marketer": "üí°",
    "critic": "üîç",
    "engineer": "‚öôÔ∏è",
    "summary_phase1": "üìù" # orchestrator.get_output_keys_phase1()Ïùò ÌÇ§ÏôÄ ÏùºÏπò
}

print(f"Initialized persona avatars: {persona_avatars}")


# ÌÖçÏä§Ìä∏Î•º Îã®Ïñ¥ Îã®ÏúÑÎ°ú Ïä§Ìä∏Î¶¨Î∞çÌïòÎäî Ìï®Ïàò (Íµ¨ÌòÑ Í≥ÑÌöçÏÑúÏóê Îî∞Îùº, ÌòÑÏû¨Îäî ÏßÅÏ†ë ÏÇ¨Ïö©ÎêòÏßÄ ÏïäÏùå)
def stream_text_generator(text: str):
    words = text.split(' ')
    for word in words:
        yield word + " "
        time.sleep(0.05) # Îã®Ïñ¥ ÏÇ¨Ïù¥Ïóê ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ Ï∂îÍ∞Ä

# --- run_phase1_analysis_and_update_ui ÎÇ¥Î∂ÄÏóêÏÑú Ìò∏Ï∂úÎê† ÎπÑÎèôÍ∏∞ Ìï®Ïàò ---
async def _run_phase1_analysis(runner: Runner, session_id_string: str, content: types.Content, orchestrator: AIdeaLabOrchestrator):
    print(f"DEBUG: _run_phase1_analysis - Starting with session_id: {session_id_string}")
    
    workflow_completed = False
    any_response_processed_successfully = False
    
    try:
        output_keys_map = orchestrator.get_output_keys_phase1() 
        output_key_to_persona_key_map = {v: k for k, v in output_keys_map.items()}

        processed_sub_agent_outputs = set() 
        expected_sub_agent_output_count = len(output_keys_map)
        print(f"DEBUG: Expected sub-agent output count: {expected_sub_agent_output_count}")
        print(f"DEBUG: Output keys to track from orchestrator: {output_keys_map}")

        event_stream = runner.run_async(
            user_id=USER_ID, 
            session_id=session_id_string,
            new_message=content
        )
        
        async for event in event_stream:
            agent_author = getattr(event, 'author', 'N/A') 
            is_final_event = event.is_final_response() if hasattr(event, 'is_final_response') else False
            event_actions = getattr(event, 'actions', None)
            state_delta = getattr(event_actions, 'state_delta', None) if event_actions else None

            print(f"DEBUG_EVENT: Author='{agent_author}', IsFinal='{is_final_event}', HasStateDelta='{state_delta is not None}'")
            # print(f"DEBUG_EVENT_DETAILS: Event ID={getattr(event,'id','N/A')}, Timestamp={getattr(event,'timestamp','N/A')}, Content={getattr(event,'content',None)}, Actions={event_actions}")

            if is_final_event and state_delta:
                for output_key_in_delta, response_text in state_delta.items():
                    if output_key_in_delta in output_keys_map.values() and output_key_in_delta not in processed_sub_agent_outputs:
                        if response_text and isinstance(response_text, str) and len(response_text.strip()) > 10:
                            print(f"DEBUG: Valid response text found for output_key '{output_key_in_delta}' from agent '{agent_author}'.")
                            
                            processed_sub_agent_outputs.add(output_key_in_delta)
                            any_response_processed_successfully = True

                            persona_key_for_display = output_key_to_persona_key_map.get(output_key_in_delta)
                            
                            if persona_key_for_display:
                                intro_message_key_base = persona_key_for_display
                                intro_message_key = f"{intro_message_key_base}_intro" 
                                # summary_phase1Ïùò Í≤ΩÏö∞ intro_message_keyÎäî "summary_phase1_intro"Í∞Ä Îê®
                                intro_content = SYSTEM_MESSAGES.get(intro_message_key)
                                avatar_char = persona_avatars.get(intro_message_key_base, "ü§ñ")

                                if intro_content:
                                    add_message("system", intro_content, avatar="‚ÑπÔ∏è")
                                else: # intro Î©îÏãúÏßÄÎ•º Ï∞æÏßÄ Î™ªÌïú Í≤ΩÏö∞ Î°úÍ∑∏ ÎÇ®Í∏∞Í∏∞ (ÌäπÌûà summary_phase1_intro ÌôïÏù∏)
                                     print(f"WARNING: Intro message content not found for key '{intro_message_key}' (Persona key: {persona_key_for_display})")

                                add_message("assistant", process_text_for_display(response_text), avatar=avatar_char)
                            else:
                                print(f"WARNING: Could not map output_key '{output_key_in_delta}' to persona_key for UI display (Agent: {agent_author}).")
                        else:
                            print(f"WARNING: No/empty/short response for output_key '{output_key_in_delta}' from agent '{agent_author}'. Text: '{response_text}'")
        
        if len(processed_sub_agent_outputs) >= expected_sub_agent_output_count:
            print(f"DEBUG: All {expected_sub_agent_output_count} expected outputs processed: {processed_sub_agent_outputs}.")
            workflow_completed = True
        else:
            print(f"WARNING: Workflow incomplete. Expected {expected_sub_agent_output_count}, processed {len(processed_sub_agent_outputs)}: {list(processed_sub_agent_outputs)}")

        if any_response_processed_successfully or workflow_completed:
             st.session_state.need_rerun = True

        print(f"DEBUG: _run_phase1_analysis - Finished. WorkflowCompleted={workflow_completed}, AnyResponseProcessed={any_response_processed_successfully}")
        return workflow_completed and any_response_processed_successfully

    except Exception as e:
        print(f"ERROR in _run_phase1_analysis: {str(e)}")
        import traceback
        traceback.print_exc()
        st.session_state.need_rerun = True 
        return False

# --- Ïó¨Í∏∞Í∞Ä Î©îÏù∏ Î∂ÑÏÑù Ïã§Ìñâ Î∞è UI ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò ---
def run_phase1_analysis_and_update_ui():
    try:
        orchestrator = AIdeaLabOrchestrator(model_name=st.session_state.selected_model)
        print(f"Created local orchestrator with model: {st.session_state.selected_model}")
        
        st.session_state.analysis_phase = "phase1_running"

        show_system_message("phase1_start")
        print("Phase 1 analysis initiated by user")
        
        idea_text = st.session_state.current_idea
        user_goal = st.session_state.get("user_goal", "")
        user_constraints = st.session_state.get("user_constraints", "")
        user_values = st.session_state.get("user_values", "")
        print(f"Analyzing idea: {idea_text}, Goal: {user_goal}, Constraints: {user_constraints}, Values: {user_values}")
        
        session_object, session_id_string = session_manager.start_new_idea_session(
            idea_text,
            user_goal=user_goal,
            user_constraints=user_constraints,
            user_values=user_values
        )
        
        if not session_object or not session_id_string:
            print("ERROR: Failed to start new idea session in SessionManager.")
            st.session_state.analysis_phase = "phase1_error"
            show_system_message("phase1_error")
            st.session_state.need_rerun = True
            return

        st.session_state.adk_session_id = session_id_string
        print(f"New session started with ID: {session_id_string}, initial state verified in SessionManager.")
        
        phase1_workflow_agent = orchestrator.get_phase1_workflow()
        print(f"Successfully retrieved phase1_workflow_agent: {phase1_workflow_agent.name if hasattr(phase1_workflow_agent, 'name') else 'N/A'}")

        runner = Runner(
            agent=phase1_workflow_agent,
            app_name=APP_NAME,
            session_service=session_manager.session_service 
        )
        print(f"Successfully initialized ADK Runner with agent: {phase1_workflow_agent.name if hasattr(phase1_workflow_agent, 'name') else 'N/A'}")
        
        content_parts = [types.Part(text=f"ÏïÑÏù¥ÎîîÏñ¥: {idea_text}")]
        if user_goal: content_parts.append(types.Part(text=f"\nÎ™©Ìëú: {user_goal}"))
        if user_constraints: content_parts.append(types.Part(text=f"\nÏ†úÏïΩÏ°∞Í±¥: {user_constraints}"))
        if user_values: content_parts.append(types.Part(text=f"\nÍ∞ÄÏπò: {user_values}"))
        
        input_content_for_runner = types.Content(role="user", parts=content_parts)
        print(f"Prepared input_content_for_runner: {input_content_for_runner}")
        
        analysis_success = asyncio.run(_run_phase1_analysis(
            runner, 
            session_id_string, 
            input_content_for_runner, 
            orchestrator
        ))
        
        if analysis_success:
            print("Phase 1 analysis processing was successful according to _run_phase1_analysis.")
            show_system_message("phase1_complete") # Í∞úÎ≥Ñ Î©îÏãúÏßÄÎäî _run_phase1_analysisÏóêÏÑú Ï∂îÍ∞Ä, Ïó¨Í∏∞ÏÑ† ÏôÑÎ£å Î©îÏãúÏßÄÎßå.
            st.session_state.analysis_phase = "phase1_complete"
        else:
            print("Phase 1 analysis processing FAILED according to _run_phase1_analysis.")
            # _run_phase1_analysis ÎÇ¥Î∂ÄÏóêÏÑú Ïù¥ÎØ∏ ÏóêÎü¨ Î°úÍ∑∏Î•º Ï∞çÏóàÏùÑ Í≤ÉÏù¥ÎØÄÎ°ú, Ïó¨Í∏∞ÏÑúÎäî UI ÏÉÅÌÉúÎßå ÏóÖÎç∞Ïù¥Ìä∏
            current_phase = st.session_state.get("analysis_phase", "")
            if current_phase != "phase1_error": 
                show_system_message("phase1_error")
                st.session_state.analysis_phase = "phase1_error"
        
        st.session_state.analyzed_idea = idea_text

    except Exception as e:
        print(f"Critical error in run_phase1_analysis_and_update_ui: {str(e)}")
        import traceback
        traceback.print_exc()
        st.session_state.analysis_phase = "phase1_error"
        show_system_message("phase1_error")
    
    finally:
        st.session_state.need_rerun = True 
        print(f"run_phase1_analysis_and_update_ui finished. Phase: {st.session_state.get('analysis_phase', 'unknown')}, NeedRerun: {st.session_state.get('need_rerun', False)}")


def initialize_session_state():
    if 'session_counter' not in st.session_state: # ÏÑ∏ÏÖò ÏßÄÏÜç ÏãúÍ∞Ñ ÎòêÎäî Í≥†Ïú† ID ÏÉùÏÑ± Îì±Ïóê ÌôúÏö© Í∞ÄÎä•
        st.session_state.session_counter = 0
    
    if 'selected_model' not in st.session_state:
        st.session_state.selected_model = DEFAULT_MODEL.value
    
    if 'messages' not in st.session_state:
        st.session_state.messages = []
        try:
            welcome_message = SYSTEM_MESSAGES.get("welcome")
            add_message("assistant", welcome_message, avatar="üß†") # ÏïÑÎ∞îÌÉÄ ÏùºÍ¥ÄÏÑ±
        except Exception as e:
            print(f"Error adding welcome message: {str(e)}")
            add_message("assistant", "AIdea LabÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§.", avatar="üß†")
    
    # ÎÇòÎ®∏ÏßÄ ÏÉÅÌÉú Ï¥àÍ∏∞ÌôîÎäî Ïù¥Ï†ÑÍ≥º Í±∞Ïùò ÎèôÏùºÌïòÍ≤å Ïú†ÏßÄ, .getÏúºÎ°ú ÏïàÏ†ÑÌïòÍ≤å Ï†ëÍ∑º
    if 'current_idea' not in st.session_state: st.session_state.current_idea = ""
    if 'analyzed_idea' not in st.session_state: st.session_state.analyzed_idea = ""
    if 'analysis_phase' not in st.session_state: st.session_state.analysis_phase = "idle"
    if 'adk_session_id' not in st.session_state: st.session_state.adk_session_id = None
    if 'user_goal' not in st.session_state: st.session_state.user_goal = ""
    if 'user_constraints' not in st.session_state: st.session_state.user_constraints = ""
    if 'user_values' not in st.session_state: st.session_state.user_values = ""
    if 'show_additional_info' not in st.session_state: st.session_state.show_additional_info = False
    if 'expander_state' not in st.session_state: st.session_state.expander_state = False # Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Îã´ÌòÄÏûàÎèÑÎ°ù Î≥ÄÍ≤Ω (ÏÑ†ÌÉù)
    if 'need_rerun' not in st.session_state: st.session_state.need_rerun = False
    if 'proceed_to_phase2' not in st.session_state: st.session_state.proceed_to_phase2 = False


def update_setting(key, value): # ÌòÑÏû¨ ÏßÅÏ†ë ÏÇ¨Ïö©ÎêòÏßÄ ÏïäÏßÄÎßå Ïú†Ìã∏Î¶¨Ìã∞Î°ú Ïú†ÏßÄ
    setattr(st.session_state, key, value)
    st.session_state.need_rerun = True

def restart_session(keep_messages=False):
    print("Restarting session...")
    messages_backup = list(st.session_state.get("messages", [])) # Get a copy

    # ÌïÑÏöîÌïú ÌïµÏã¨ ÏÉÅÌÉúÎßå Ï¥àÍ∏∞ÌôîÌïòÍ≥† ÎÇòÎ®∏ÏßÄÎäî initialize_session_stateÏóê Îß°ÍπÄ
    keys_to_reset_for_new_idea = [
        'current_idea', 'analyzed_idea', 'analysis_phase', 
        'adk_session_id', 'user_goal', 'user_constraints', 'user_values',
        'proceed_to_phase2' 
        # 'show_additional_info' ÏôÄ 'expander_state'Îäî ÏÇ¨Ïö©ÏûêÏùò ÏÑ†ÌÉùÏùÑ Ïú†ÏßÄÌï† Ïàò ÏûàÏùå
    ]
    for key in keys_to_reset_for_new_idea:
        if key in st.session_state:
            del st.session_state[key] 
            # ÎòêÎäî st.session_state[key] = <Ï¥àÍ∏∞Í∞í> ÏúºÎ°ú ÏÑ§Ï†ï

    # Í∏∞Î≥∏ ÏÉÅÌÉúÍ∞í Ïû¨ÏÑ§Ï†ï (messages Ï†úÏô∏)
    initialize_session_state() # messagesÍ∞Ä Ïó¨Í∏∞ÏÑú Îã§Ïãú Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÎèÑÎ°ù Ï£ºÏùò ÌïÑÏöî

    if keep_messages:
        st.session_state.messages = messages_backup
    else:
        st.session_state.messages = [] 
        try:
            welcome_message = SYSTEM_MESSAGES.get("welcome")
            add_message("assistant", welcome_message, avatar="üß†")
        except Exception as e:
            print(f"Error re-adding welcome message: {str(e)}")
            add_message("assistant", "AIdea LabÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§.", avatar="üß†")
    
    print("Session restart logic completed.")
    st.session_state.need_rerun = True


def process_text_for_display(text_data):
    if not isinstance(text_data, str):
        text_data = str(text_data)
    # MarkdownÏóêÏÑú ÏûêÎèô Ï§ÑÎ∞îÍøàÏùÑ ÏúÑÌï¥ Ï§Ñ ÎÅùÏóê Í≥µÎ∞± Îëê Í∞úÎ•º Ï∂îÍ∞ÄÌïòÍ±∞ÎÇò, 
    # StreamlitÏù¥ CSSÎ•º ÌÜµÌï¥ white-space: pre-wrap Îì±ÏùÑ ÏßÄÏõêÌïòÎäîÏßÄ ÌôïÏù∏.
    # Ïó¨Í∏∞ÏÑúÎäî Î™ÖÏãúÏ†ÅÏúºÎ°ú HTML <br> ÌÉúÍ∑∏ÎÇò ÎßàÌÅ¨Îã§Ïö¥ Í≥µÎ∞±2Í∞úÎ•º ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏùå.
    return text_data.replace("\n", "  \n")

def add_message(role, content, avatar=None):
    if content is None: # contentÍ∞Ä NoneÏù∏ Í≤ΩÏö∞ Ï∂îÍ∞ÄÌïòÏßÄ ÏïäÏùå
        print(f"Skipping add_message for role {role} because content is None.")
        return

    print(f"Adding message - Role: {role}, Avatar: {avatar}, Content preview: {str(content)[:70]}...")
    
    # Î©îÏãúÏßÄ Í∞ùÏ≤¥ ÏÉùÏÑ±
    message_obj = {"role": role, "content": content, "avatar": avatar}
    
    # ÌòÑÏû¨ Î©îÏãúÏßÄ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ (ÏóÜÏúºÎ©¥ ÏÉàÎ°ú ÏÉùÏÑ±)
    if 'messages' not in st.session_state:
        st.session_state.messages = []
        
    # ÏãúÏä§ÌÖú Î©îÏãúÏßÄÏùò Í≤ΩÏö∞, Î∞îÎ°ú Ïù¥Ï†Ñ Î©îÏãúÏßÄÏôÄ ÎÇ¥Ïö© Î∞è ÏïÑÎ∞îÌÉÄÍ∞Ä ÎèôÏùºÌïòÎ©¥ Ï∂îÍ∞ÄÌïòÏßÄ ÏïäÏùå (Ïó∞ÏÜç Ï§ëÎ≥µ Î∞©ÏßÄ)
    is_system_message_type = avatar == "‚ÑπÔ∏è" # ÏãúÏä§ÌÖú Î©îÏãúÏßÄ ÏïÑÎ∞îÌÉÄ Í∏∞Ï§Ä
    if is_system_message_type and st.session_state.messages:
        last_message = st.session_state.messages[-1]
        if last_message.get("role") == role and \
           last_message.get("content") == content and \
           last_message.get("avatar") == avatar:
            print("Consecutive duplicate system message skipped.")
            return
            
    st.session_state.messages.append(message_obj)
    print(f"Message added. Total messages: {len(st.session_state.messages)}")

def show_system_message(message_key, rerun_immediately=False):
    message_content = SYSTEM_MESSAGES.get(message_key)
    if message_content:
        print(f"Showing system message for key '{message_key}': {message_content[:70]}...")
        add_message("system", message_content, avatar="‚ÑπÔ∏è")
        if rerun_immediately:
            st.session_state.need_rerun = True
    else:
        print(f"WARNING: System message key '{message_key}' not defined in SYSTEM_MESSAGES.")

def main():
    initialize_session_state()
    
    st.title("AIdea Lab - ÏïÑÏù¥ÎîîÏñ¥ Î∂ÑÏÑù ÏõåÌÅ¨Ïàç")
    st.markdown("ÎãπÏã†Ïùò ÏïÑÏù¥ÎîîÏñ¥Î•º AIÍ∞Ä Îã§ÏñëÌïú Í¥ÄÏ†êÏóêÏÑú Î∂ÑÏÑùÌï¥ÎìúÎ¶ΩÎãàÎã§!")
    
    # Î™®Îç∏ ÏÑ†ÌÉù UI
    model_options = [model.value for model in ModelType]
    default_model_value = st.session_state.get('selected_model', DEFAULT_MODEL.value)
    try:
        default_index = model_options.index(default_model_value)
    except ValueError:
        default_index = 0 # Í∏∞Î≥∏Í∞íÏù¥ ÏòµÏÖòÏóê ÏóÜÏúºÎ©¥ Ï≤´Î≤àÏß∏ ÏÑ†ÌÉù
        st.session_state.selected_model = model_options[0] if model_options else DEFAULT_MODEL.value

    selected_model_value_from_ui = st.selectbox(
        "AI Î™®Îç∏ ÏÑ†ÌÉù",
        options=model_options,
        index=default_index,
        key="model_selector_widget"
    )
    if st.session_state.selected_model != selected_model_value_from_ui:
        st.session_state.selected_model = selected_model_value_from_ui
        print(f"Model selection changed to: {st.session_state.selected_model}. Restarting session.")
        restart_session(keep_messages=False) # Î™®Îç∏ Î≥ÄÍ≤Ω Ïãú Î©îÏãúÏßÄ Ï¥àÍ∏∞ÌôîÌïòÍ≥† rerun
        # restart_sessionÏóêÏÑú need_rerun = True ÏÑ§Ï†ïÎêòÎØÄÎ°ú Ïó¨Í∏∞ÏÑú Ï∂îÍ∞Ä ÏÑ§Ï†ï Î∂àÌïÑÏöî

    # Ï±ÑÌåÖ Î©îÏãúÏßÄ ÌëúÏãú
    messages_container = st.container()
    with messages_container:
        if st.session_state.get('messages'):
            for idx, message in enumerate(st.session_state.messages): # Added enumerate for unique keys if needed
                role = message.get("role", "")
                msg_content = message.get("content", "")
                avatar = message.get("avatar", None)
                
                try:
                    if role == "user":
                        st.chat_message(role, avatar="üßë‚Äçüíª").write(msg_content)
                    elif role == "assistant":
                        st.chat_message(role, avatar=avatar).write(msg_content)
                    elif role == "system":
                        # ÏãúÏä§ÌÖú Î©îÏãúÏßÄÎ•º info Î∞ïÏä§ ÎåÄÏã† ÏùºÎ∞ò Î©îÏãúÏßÄÏ≤òÎüº Î≥¥Ïù¥Í≤å Ï≤òÎ¶¨
                        # st.info(msg_content) 
                        st.chat_message("assistant", avatar=avatar if avatar else "‚ÑπÔ∏è").markdown(f"_{msg_content}_")
                except Exception as e:
                    print(f"Error rendering message (idx: {idx}): Role={role}, Avatar={avatar}, Exc={e}")
                    st.error(f"Î©îÏãúÏßÄ Î†åÎçîÎßÅ Ï§ë Ïò§Î•ò Î∞úÏÉù: {str(msg_content)[:30]}...")

    # ÏûÖÎ†• UI Î∂ÄÎ∂Ñ
    input_container = st.container()
    with input_container:
        current_analysis_phase = st.session_state.get("analysis_phase", "idle")

        if current_analysis_phase == "idle":
            # Ï∂îÍ∞Ä Ï†ïÎ≥¥ ÏûÖÎ†• Î≤ÑÌäº (ÌÜ†Í∏Ä Î∞©Ïãù)
            additional_info_button_label = "ÏïÑÏù¥ÎîîÏñ¥ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ïà®Í∏∞Í∏∞" if st.session_state.get("show_additional_info") else "ÏïÑÏù¥ÎîîÏñ¥ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÏûÖÎ†• (ÏÑ†ÌÉù)"
            if st.button(additional_info_button_label, key="toggle_additional_info_button"):
                st.session_state.show_additional_info = not st.session_state.get("show_additional_info", False)
                if st.session_state.show_additional_info:
                     st.session_state.expander_state = True # ÌéºÏπ† ÎïåÎßå True
                st.session_state.need_rerun = True

            if st.session_state.get("show_additional_info"):
                with st.expander("ÏïÑÏù¥ÎîîÏñ¥ ÏÉÅÏÑ∏ Ï†ïÎ≥¥", expanded=st.session_state.get("expander_state", True)):
                    st.text_area("ÏïÑÏù¥ÎîîÏñ¥Ïùò ÌïµÏã¨ Î™©Ìëú ÎòêÎäî Ìï¥Í≤∞ÌïòÍ≥†Ïûê ÌïòÎäî Î¨∏Ï†ú:", key="user_goal_input", value=st.session_state.get("user_goal",""))
                    st.text_area("Ï£ºÏöî Ï†úÏïΩ Ï°∞Í±¥ (Ïòà: ÏòàÏÇ∞, ÏãúÍ∞Ñ, Í∏∞Ïà† Îì±):", key="user_constraints_input", value=st.session_state.get("user_constraints",""))
                    st.text_area("Ï§ëÏöîÌïòÍ≤å ÏÉùÍ∞ÅÌïòÎäî Í∞ÄÏπò (Ïòà: Ìö®Ïú®ÏÑ±, Ï∞ΩÏùòÏÑ± Îì±):", key="user_values_input", value=st.session_state.get("user_values",""))
                    if st.button("ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï†ÄÏû•", key="save_additional_info"):
                        st.session_state.user_goal = st.session_state.user_goal_input
                        st.session_state.user_constraints = st.session_state.user_constraints_input
                        st.session_state.user_values = st.session_state.user_values_input
                        st.session_state.expander_state = False # Ï†ÄÏû• ÌõÑ Îã´Í∏∞
                        st.session_state.show_additional_info = False # Ï†ÄÏû• ÌõÑ Î≤ÑÌäº ÌÖçÏä§Ìä∏ Î≥ÄÍ≤Ω ÏúÑÌï¥
                        st.success("ÏÉÅÏÑ∏ Ï†ïÎ≥¥Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.")
                        st.session_state.need_rerun = True
            
            user_input = st.chat_input("Ïó¨Í∏∞Ïóê ÏïÑÏù¥ÎîîÏñ¥Î•º ÏûÖÎ†•ÌïòÍ≥† EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...")
            if user_input:
                if not st.session_state.get("user_goal"): # ÏÉÅÏÑ∏Ï†ïÎ≥¥Í∞Ä ÏûÖÎ†•ÎêòÏßÄ ÏïäÏïòÎã§Î©¥, ÌôïÏû•ÌëúÏãú
                    st.session_state.show_additional_info = True
                    st.session_state.expander_state = True

                add_message("user", user_input)
                st.session_state.current_idea = user_input
                st.session_state.analysis_phase = "phase1_pending_start"
                st.session_state.need_rerun = True
        
        elif current_analysis_phase == "phase1_pending_start":
            if st.session_state.current_idea and st.session_state.current_idea != st.session_state.get("analyzed_idea"):
                with st.spinner("AI ÌéòÎ•¥ÏÜåÎÇòÍ∞Ä ÏïÑÏù¥ÎîîÏñ¥Î•º Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§... Ïù¥ ÏûëÏóÖÏùÄ ÏµúÎåÄ 1-2Î∂Ñ ÏÜåÏöîÎê† Ïàò ÏûàÏäµÎãàÎã§."):
                    # ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï†ÄÏû• (ÎßåÏïΩ expanded Îêú ÏÉÅÌÉúÏóêÏÑú ÏïÑÏù¥ÎîîÏñ¥Îßå Î∞îÎ°ú ÏûÖÎ†•ÌñàÏùÑ Í≤ΩÏö∞ ÎåÄÎπÑ)
                    if st.session_state.get("show_additional_info"):
                         st.session_state.user_goal = st.session_state.get("user_goal_input", st.session_state.get("user_goal",""))
                         st.session_state.user_constraints = st.session_state.get("user_constraints_input", st.session_state.get("user_constraints",""))
                         st.session_state.user_values = st.session_state.get("user_values_input", st.session_state.get("user_values",""))
                    run_phase1_analysis_and_update_ui() # Ïó¨Í∏∞ÏÑú Î∂ÑÏÑù Ïã§Ìñâ Î∞è ÏÉÅÌÉú Î≥ÄÍ≤Ω
            else: # Ïù¥ÎØ∏ Î∂ÑÏÑùÎêú ÏïÑÏù¥ÎîîÏñ¥Í±∞ÎÇò current_ideaÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ (Î≥¥ÌÜµ Î∞úÏÉù Ïïà Ìï®)
                st.session_state.analysis_phase = "idle" # Îã§Ïãú idleÎ°ú
                st.session_state.need_rerun = True


        elif current_analysis_phase == "phase1_complete":
            st.success("‚úîÔ∏è 1Îã®Í≥Ñ ÏïÑÏù¥ÎîîÏñ¥ Î∂ÑÏÑùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üí¨ 2Îã®Í≥Ñ ÌÜ†Î°† ÏãúÏûëÌïòÍ∏∞", key="start_phase2_button", use_container_width=True):
                    st.session_state.analysis_phase = "phase2_pending_start" 
                    st.session_state.proceed_to_phase2 = True
                    # show_system_message("phase2_welcome") # 2Îã®Í≥Ñ ÏãúÏûë Î©îÏãúÏßÄ (ÌïÑÏöîÏãú)
                    print("User selected to start Phase 2 discussion.")
                    st.session_state.need_rerun = True
            
            with col2:
                if st.button("‚ú® ÏÉà ÏïÑÏù¥ÎîîÏñ¥ Î∂ÑÏÑù", key="new_idea_after_phase1_button", use_container_width=True):
                    restart_session(keep_messages=False)
                    # analysis_phaseÎäî restart_session ÎÇ¥Î∂ÄÏóêÏÑú idleÎ°ú ÏÑ§Ï†ïÎê® (initialize_session_state Ìò∏Ï∂ú)
                    print("User selected to analyze a new idea after Phase 1 completion.")
                    # st.session_state.need_rerun = True # restart_session ÏóêÏÑú Ïù¥ÎØ∏ ÏÑ§Ï†ï

        elif current_analysis_phase == "phase1_error":
            # Ïò§Î•ò Î©îÏãúÏßÄÎäî show_system_messageÎ•º ÌÜµÌï¥ Ïù¥ÎØ∏ messagesÏóê Ï∂îÍ∞ÄÎêòÏóàÏùÑ Í≤ÉÏûÑ
            # st.error("Î∂ÑÏÑù Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.") # Ï§ëÎ≥µÎê† Ïàò ÏûàÏúºÎØÄÎ°ú Ï†úÍ±∞ÌïòÍ±∞ÎÇò Ïú†ÏßÄ
            
            col_retry, col_restart_new = st.columns(2)
            with col_retry:
                if st.button("Í∞ôÏùÄ ÏïÑÏù¥ÎîîÏñ¥Î°ú Ïû¨ÏãúÎèÑ", key="retry_button_error", use_container_width=True):
                    # Î©îÏãúÏßÄ Í∏∞Î°ùÏóêÏÑú ÎßàÏßÄÎßâ ÏÇ¨Ïö©Ïûê ÏïÑÏù¥ÎîîÏñ¥ÏôÄ Ïò§Î•ò Í¥ÄÎ†® ÏãúÏä§ÌÖú Î©îÏãúÏßÄ Ï†úÍ±∞ (ÏÑ†ÌÉùÏ†Å)
                    # Ïòà: st.session_state.messages = [m for m in st.session_state.messages if m.get("role") == "assistant" and "ÌôòÏòÅÌï©ÎãàÎã§" in m.get("content","")]
                    # ÏúÑÏôÄ Í∞ôÏù¥ ÌïòÍ±∞ÎÇò, Í∑∏ÎÉ• Î©îÏãúÏßÄÎ•º Ïú†ÏßÄÌïòÍ≥† Ïû¨ÏãúÎèÑ
                    st.session_state.analysis_phase = "phase1_pending_start" 
                    st.session_state.analyzed_idea = "" 
                    # Ïò§Î•ò Í¥ÄÎ†® ÏãúÏä§ÌÖú Î©îÏãúÏßÄÎ•º ÌïúÎ≤à Îçî Î≥¥Ïó¨Ï£ºÎäî Í≤É Î∞©ÏßÄ ÏúÑÌï¥, ÎßàÏßÄÎßâ Î©îÏãúÏßÄ Í≤ÄÏÇ¨ ÌõÑ Ï∂îÍ∞Ä
                    # show_system_message("phase1_start", rerun_immediately=True) # Ïù¥ÎØ∏ phase1_start Î©îÏãúÏßÄÎäî ÏûàÏùÑ Í≤ÉÏûÑ
                    st.session_state.need_rerun = True
            with col_restart_new:
                if st.button("ÏÉà ÏïÑÏù¥ÎîîÏñ¥Î°ú ÏãúÏûë", key="restart_button_error", use_container_width=True):
                    restart_session(keep_messages=False)
        
        elif current_analysis_phase == "phase2_pending_start":
            st.info("2Îã®Í≥Ñ ÌÜ†Î°† Í∏∞Îä•ÏùÄ ÌòÑÏû¨ Í∞úÎ∞ú Ï§ëÏûÖÎãàÎã§. Í≥ß ÎßåÎÇòÎ≥¥Ïã§ Ïàò ÏûàÏäµÎãàÎã§! üòä")
            if st.button("ÎèåÏïÑÍ∞ÄÍ∏∞", key="back_to_phase1_complete"):
                st.session_state.analysis_phase = "phase1_complete" # Ïù¥Ï†Ñ ÏÉÅÌÉúÎ°ú
                st.session_state.proceed_to_phase2 = False
                st.session_state.need_rerun = True
    
    if st.session_state.get("need_rerun", False):
        st.session_state.need_rerun = False
        st.rerun()

if __name__ == "__main__":
    main()